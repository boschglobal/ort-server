/*
 * Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.services

import org.eclipse.apoapsis.ortserver.dao.dbQuery
import org.eclipse.apoapsis.ortserver.dao.tables.AdvisorJobsTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.AdvisorResultsTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.AdvisorResultsVulnerabilitiesTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.AdvisorRunsIdentifiersTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.AdvisorRunsTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.VulnerabilitiesTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.VulnerabilityDao
import org.eclipse.apoapsis.ortserver.dao.tables.runs.advisor.VulnerabilityReferencesTable
import org.eclipse.apoapsis.ortserver.dao.tables.runs.shared.IdentifiersTable
import org.eclipse.apoapsis.ortserver.dao.utils.listCustomQuery
import org.eclipse.apoapsis.ortserver.model.VulnerabilityWithIdentifier
import org.eclipse.apoapsis.ortserver.model.runs.Identifier
import org.eclipse.apoapsis.ortserver.model.runs.advisor.Vulnerability
import org.eclipse.apoapsis.ortserver.model.runs.advisor.VulnerabilityReference
import org.eclipse.apoapsis.ortserver.model.util.ListQueryParameters
import org.eclipse.apoapsis.ortserver.model.util.ListQueryResult

import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.ResultRow

/**
 * A service to interact with vulnerabilities.
 */
class VulnerabilityService(private val db: Database) {
    suspend fun listForOrtRunId(
        ortRunId: Long,
        parameters: ListQueryParameters = ListQueryParameters.DEFAULT
    ): ListQueryResult<VulnerabilityWithIdentifier> = db.dbQuery {
        val vulnerabilityQueryResult =
            VulnerabilityDao.listCustomQuery(parameters, ResultRow::toVulnerabilityWithIdentifierAndReference) {
                val join = VulnerabilitiesTable innerJoin
                        AdvisorResultsVulnerabilitiesTable innerJoin
                        AdvisorResultsTable innerJoin
                        AdvisorRunsIdentifiersTable innerJoin
                        AdvisorRunsTable innerJoin
                        AdvisorJobsTable innerJoin
                        IdentifiersTable

                join.select(
                    VulnerabilitiesTable.id,
                    VulnerabilitiesTable.externalId,
                    VulnerabilitiesTable.summary,
                    VulnerabilitiesTable.description,
                    IdentifiersTable.type,
                    IdentifiersTable.namespace,
                    IdentifiersTable.name,
                    IdentifiersTable.version
                ).where { AdvisorJobsTable.ortRunId eq ortRunId }
            }

        // Get all references for the vulnerabilities.
        val externalIds = vulnerabilityQueryResult.data.map { it.vulnerability.externalId }
        val referencesByExternalId = getReferencesForVulnerabilities(externalIds)

        // Add the references to the vulnerabilities.
        val result = mutableListOf<VulnerabilityWithIdentifier>()
        vulnerabilityQueryResult.data.forEach {
            val references = referencesByExternalId[it.vulnerability.externalId].orEmpty()
            val vulnerability = it.vulnerability.copy(references = references)
            result.add(VulnerabilityWithIdentifier(vulnerability, it.identifier))
        }

        ListQueryResult(result, parameters, vulnerabilityQueryResult.totalCount)
    }

    /**
     * Get all references for the vulnerabilities with the given [externalIds]. Group them by the externalId.
     */
    private fun getReferencesForVulnerabilities(externalIds: List<String>): Map<String, List<VulnerabilityReference>> {
        val result = mutableMapOf<String, List<VulnerabilityReference>>()

        VulnerabilityReferencesTable.innerJoin(VulnerabilitiesTable)
            .select(
                VulnerabilityReferencesTable.vulnerabilityId,
                VulnerabilityReferencesTable.url,
                VulnerabilityReferencesTable.severity,
                VulnerabilityReferencesTable.scoringSystem,
                VulnerabilitiesTable.externalId
            ).where { VulnerabilitiesTable.externalId inList externalIds }
            .map {
                it[VulnerabilitiesTable.externalId] to VulnerabilityReference(
                    it[VulnerabilityReferencesTable.url],
                    it[VulnerabilityReferencesTable.scoringSystem],
                    it[VulnerabilityReferencesTable.severity]
                )
            }.forEach {
                val vulnerabilities = result[it.first]?.toMutableList() ?: mutableListOf()
                vulnerabilities.add(it.second)
                result[it.first] = vulnerabilities
            }

        return result
    }
}

private fun ResultRow.toVulnerabilityWithIdentifierAndReference(): VulnerabilityWithIdentifier {
    return VulnerabilityWithIdentifier(
        vulnerability = Vulnerability(
            this[VulnerabilitiesTable.externalId],
            this[VulnerabilitiesTable.summary],
            this[VulnerabilitiesTable.description],
            emptyList() // References will be added in a separate step.
        ),
        identifier = Identifier(
            this[IdentifiersTable.type],
            this[IdentifiersTable.namespace],
            this[IdentifiersTable.name],
            this[IdentifiersTable.version],
        )
    )
}
